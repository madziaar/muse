import { Content } from "@google/genai";
// FIX: Replaced incorrect import with the definition of AppContextType to resolve a circular dependency and export errors.
import React from 'react';

/**
 * The available languages for the application.
 */
export type Language = 'en' | 'pl';

/**
 * The parameters for the Riffusion model.
 */
export interface RiffusionParameters {
    /**
     * A value between 0.0 and 1.0. Higher values make the output more creative.
     */
    denoising: number;
    /**
     * A value between 0.0 and 1.0. How much the prompt should influence the output.
     */
    prompt_strength: number;
    /**
     * An integer between 10 and 150. Number of steps in the generation process.
     */
    num_inference_steps: number;
    /**
     * A short, random, memorable two-word ID for the seed.
     */
    seed_image_id: string;
    /**
     * Optional. The scheduling algorithm to use, e.g., 'DDIM', 'K_EULER'.
     */
    scheduler?: string;
}

/**
 * The content generated by the Muse feature.
 */
export interface GeneratedContent {
    /**
     * A unique identifier for the generated content.
     */
    id: string;
    /**
     * The original prompt used to generate this content.
     */
    originalIdea: string;
    /**
     * A comma-separated list of tags for a music generation model like Riffusion.
     */
    riffusionPrompt: string;
    /**
     * An optional comma-separated list of tags the AI should actively avoid.
     */
    negativePrompt?: string;
    /**
     * The song lyrics or an instrumental guide.
     */
    lyrics: string;
    /**
     * A simple, dash-separated representation of the song's structure.
     */
    songStructure: string;
    /**
     * The parameters used for the Riffusion model.
     */
    parameters: RiffusionParameters;
    /**
     * The mode of generation, either 'lyrics' or 'instrumental'.
     */
    generationMode: 'lyrics' | 'instrumental';
}

/**
 * A message in the chat feature.
 */
export interface ChatMessage {
    /**
     * The role of the message sender, either 'user' or 'model'.
     */
    role: 'user' | 'model';
    /**
     * The parts of the message.
     */
    parts: [{ text: string }];
}

/**
 * A toast notification.
 */
export interface ToastNotification {
    /**
     * A unique identifier for the toast.
     */
    id: number;
    /**
     * The message to display in the toast.
     */
    message: string;
    /**
     * The type of the toast, which determines its color.
     */
    type: 'success' | 'error' | 'info';
}

/**
 * The possible active tabs in the application.
 */
export type ActiveTab = 'tabMuse' | 'tabExplorer' | 'tabResearcher' | 'tabAnalyzer' | 'tabChat';

/**
 * The type for the application context.
 */
export interface AppContextType {
    /**
     * The current prompt for the Muse feature.
     */
    musePrompt: string;
    /**
     * The function to set the Muse prompt.
     */
    setMusePrompt: React.Dispatch<React.SetStateAction<string>>;
    /**
     * The currently active tab.
     */
    activeTab: ActiveTab;
    /**
     * The function to set the active tab.
     */
    setActiveTab: React.Dispatch<React.SetStateAction<ActiveTab>>;
    /**
     * The list of toasts to display.
     */
    toasts: ToastNotification[];
    /**
     * The function to add a new toast.
     */
    addToast: (message: string, type: ToastNotification['type']) => void;
    /**
     * The function to dismiss a toast.
     */
    dismissToast: (id: number) => void;
}

/**
 * A tab in the application.
 */
export interface Tab {
    /**
     * A unique key for the tab.
     */
    key: AppContextType['activeTab'];
    /**
     * The name of the tab.
     */
    name: string;
    /**
     * The icon for the tab.
     */
    icon: React.ReactNode;
}
